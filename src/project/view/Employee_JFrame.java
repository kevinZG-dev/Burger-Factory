/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.view;

import java.awt.Color;
import static java.lang.Integer.parseInt;
import java.text.DecimalFormat;
import project.model.entity.Item;
import project.model.dao.ItemDAOimpl;
import java.util.ArrayList;
import javax.swing.*;
import project.model.dao.Item_cartDAOimpl;
import project.model.dao.SalesRecordDAOimpl;
import project.model.dao.SalesRecord_ItemDAOimpl;


/**
 * Classe employee_JFrame qui hérite de la classe JFrame 
 * et qui permet l'affichage de linterface employé qui gere tout
 * @author maximeattal
 */
public class Employee_JFrame extends javax.swing.JFrame {

    private final ItemDAOimpl itDAO = new ItemDAOimpl();
    private final SalesRecordDAOimpl salesDAO = new SalesRecordDAOimpl();
    private final Item_cartDAOimpl itCartDAO = new Item_cartDAOimpl();
    private final SalesRecord_ItemDAOimpl salesitDAO = new SalesRecord_ItemDAOimpl();
    //Listes des shops pour chaque type
    private ArrayList<Item> shop_burger;
    private ArrayList<Item> shop_topping;
    private ArrayList<Item> shop_drink;
    private ArrayList<Item> shop_dessert;
    //models pour les Jlists du shop
    private DefaultListModel model1;
    private DefaultListModel model2;
    private DefaultListModel model3;
    private DefaultListModel model4;
    //2 decimal maxi
    private final DecimalFormat df;

    /**
     * Constructeur Employee_JFrame qui appelle toutes les méthodes pour l'initialisation
     */
    public Employee_JFrame() {
        
        initComponents();
        this.setTitle("Burger Factory");
        //initialise format 2 decimal maxi
        df = new DecimalFormat("0.00");
        initJlists();//initialise les models et les lists
        initShops(); //instancie et charge ensuite la liste des items du shop
        loadSalesRecord(); //Affichage des commandes passées
        setVisible(true);
        //DESCRIPTION JTEXTAREA PROPERTIES :
        jTextAreaDescription.setEditable(false);  //We can't edit the text area  
        jTextAreaDescription.setLineWrap(true);
        jTextAreaDescription.setWrapStyleWord(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelItemActions = new javax.swing.JPanel();
        jTabbedPaneItems = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListBurger = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListTopping = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListDrink = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListDessert = new javax.swing.JList();
        jButtonDelete = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jLabelDescription = new javax.swing.JLabel();
        jPanel_show_item = new javax.swing.JPanel();
        jLabel_image = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jLabelTitle1 = new javax.swing.JLabel();
        jLabelTitle2 = new javax.swing.JLabel();
        jPanelSalesActions = new javax.swing.JPanel();
        jButtonAnalytics = new javax.swing.JButton();
        jLabelSalesRecord = new javax.swing.JLabel();
        jButtonDisconnection = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaTicket = new javax.swing.JTextArea();
        jLabelSalesId = new javax.swing.JLabel();
        jTextFieldSalesId = new javax.swing.JTextField();
        jButtonMoreInfo = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextAreaSalesRecord = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelItemActions.setBackground(new java.awt.Color(209, 225, 255));
        jPanelItemActions.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 204), 3));
        jPanelItemActions.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPaneItems.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jListBurger.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jListBurger.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListBurger.setFixedCellHeight(25);
        jListBurger.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListBurgerMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListBurger);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 410, 340));

        jTabbedPaneItems.addTab("Burger", jPanel2);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jListTopping.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jListTopping.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListTopping.setFixedCellHeight(25);
        jListTopping.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListToppingMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListTopping);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 410, 340));

        jTabbedPaneItems.addTab("Topping", jPanel3);

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jListDrink.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jListDrink.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListDrink.setFixedCellHeight(25);
        jListDrink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDrinkMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jListDrink);

        jPanel4.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 410, 340));

        jTabbedPaneItems.addTab("Drink", jPanel4);

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jListDessert.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jListDessert.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListDessert.setFixedCellHeight(25);
        jListDessert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDessertMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jListDessert);

        jPanel5.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 410, 340));

        jTabbedPaneItems.addTab("Dessert", jPanel5);

        jPanelItemActions.add(jTabbedPaneItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 420, 370));

        jButtonDelete.setText("Delete");
        jButtonDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDeleteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonDeleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonDeleteMouseExited(evt);
            }
        });
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        jPanelItemActions.add(jButtonDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 530, 80, 60));

        jButtonAdd.setText("Add");
        jButtonAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonAddMouseExited(evt);
            }
        });
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        jPanelItemActions.add(jButtonAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 80, 60));

        jButtonEdit.setText("Edit");
        jButtonEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonEditMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonEditMouseExited(evt);
            }
        });
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });
        jPanelItemActions.add(jButtonEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 530, 80, 60));

        jLabelDescription.setText("Description :");
        jPanelItemActions.add(jLabelDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 405, -1, -1));

        jPanel_show_item.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_show_item.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        jPanel_show_item.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel_show_item.add(jLabel_image, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 90, 90));

        jPanelItemActions.add(jPanel_show_item, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 420, 100, 100));

        jScrollPane7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTextAreaDescription.setBackground(new java.awt.Color(240, 240, 240));
        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setFont(new java.awt.Font("Lucida Bright", 0, 13)); // NOI18N
        jTextAreaDescription.setRows(5);
        jTextAreaDescription.setBorder(null);
        jScrollPane7.setViewportView(jTextAreaDescription);

        jPanelItemActions.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 300, 100));

        jPanel1.add(jPanelItemActions, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 84, 472, 603));

        jLabelTitle1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelTitle1.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitle1.setText("Employee");
        jPanel1.add(jLabelTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, -1, -1));

        jLabelTitle2.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitle2.setText("Inventory Manager");
        jPanel1.add(jLabelTitle2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 50, -1, -1));

        jPanelSalesActions.setBackground(new java.awt.Color(209, 225, 255));
        jPanelSalesActions.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 204), 3));
        jPanelSalesActions.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonAnalytics.setText("Analytics");
        jButtonAnalytics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonAnalyticsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonAnalyticsMouseExited(evt);
            }
        });
        jButtonAnalytics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnalyticsActionPerformed(evt);
            }
        });
        jPanelSalesActions.add(jButtonAnalytics, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 480, 120, 50));

        jLabelSalesRecord.setText("Sales Record :");
        jPanelSalesActions.add(jLabelSalesRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jButtonDisconnection.setText("Disconnection");
        jButtonDisconnection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonDisconnectionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonDisconnectionMouseExited(evt);
            }
        });
        jButtonDisconnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisconnectionActionPerformed(evt);
            }
        });
        jPanelSalesActions.add(jButtonDisconnection, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 530, 120, 50));

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTextAreaTicket.setEditable(false);
        jTextAreaTicket.setColumns(20);
        jTextAreaTicket.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaTicket.setRows(5);
        jTextAreaTicket.setAutoscrolls(false);
        jScrollPane5.setViewportView(jTextAreaTicket);

        jPanelSalesActions.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 350, 270, 230));

        jLabelSalesId.setText("Sales Record Id:");
        jPanelSalesActions.add(jLabelSalesId, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, -1, -1));
        jPanelSalesActions.add(jTextFieldSalesId, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 370, 40, 20));

        jButtonMoreInfo.setText("More Info");
        jButtonMoreInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonMoreInfoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonMoreInfoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonMoreInfoMouseExited(evt);
            }
        });
        jButtonMoreInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoreInfoActionPerformed(evt);
            }
        });
        jPanelSalesActions.add(jButtonMoreInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 120, 40));

        jScrollPane6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));

        jTextAreaSalesRecord.setBackground(new java.awt.Color(240, 240, 240));
        jTextAreaSalesRecord.setColumns(20);
        jTextAreaSalesRecord.setFont(new java.awt.Font("Lucida Bright", 0, 12)); // NOI18N
        jTextAreaSalesRecord.setRows(5);
        jTextAreaSalesRecord.setBorder(null);
        jScrollPane6.setViewportView(jTextAreaSalesRecord);

        jPanelSalesActions.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 430, 300));

        jPanel1.add(jPanelSalesActions, new org.netbeans.lib.awtextra.AbsoluteConstraints(535, 84, 472, 600));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ardoise.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1060, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Displays the receipt of the sales whose id was sent as a parameter.
     *
     * @param id
     */
    public void loadReceipt(int id) {
        jTextAreaTicket.setEditable(false); //We can't edit the jtextarea
        jTextAreaTicket.setText(""); //We clear the jTextArea
        String receipt = salesDAO.getReceipt(id); //Getting the receipt of the sales id stored in the database
        jTextAreaTicket.append(receipt); //We add the receipt to the jTextArea to display it
    }

    /**
     * Getting the id of the the item of the type 'jList' which is selected
     *
     * @param jList
     * @return id (which is the id of the selected item in String (if no item is
     * selected it return ""))
     */
    public String getIdSelected(javax.swing.JList jList) {
        //We get all the String selected (with the id, the name, the price of the item)
        String item = (String) jList.getSelectedValue();
        String id = ""; //Initialising of the id that we will return
        int i = 0; //Initialising of the loop's iterator

        //If an item is selected
        if (item != null) {
            //We go through all the char of the string 'item'
            //while we don't get a space
            while (item.charAt(i) != ' ') {
                //We add to the previous id the char that we’re going through
                //Like so the id can be retrieved even if it has several digits
                id = id + item.charAt(i);
                ++i; //we increment the iterator by 1
            }
        }

        return id; //return the id (if no item is selected it return "")
    }

    /**
     * methode qui initialise les jLists
     */
    @SuppressWarnings("unchecked")
    public void initJlists() {

        //Instancie les models pour les jLists
        model1 = new DefaultListModel();
        model2 = new DefaultListModel();
        model3 = new DefaultListModel();
        model4 = new DefaultListModel();
        //On set les models dans les jLists correspondantes
        jListBurger.setModel(model1);
        jListTopping.setModel(model2);
        jListDrink.setModel(model3);
        jListDessert.setModel(model4);
    }

    /**
     * On initialise les listes d'objet items selon son type On load a paritr de
     * la bdd les differents items, dans sa liste crrespondante On affiche dans
     * les jLists les items correspondants
     */
    public void initShops() {

        //Init juste des reglages pour le textarea de la description
        jTextAreaDescription.setLineWrap(true);
        jTextAreaDescription.setWrapStyleWord(true);

        //Init shops
        shop_burger = new ArrayList<Item>();
        shop_topping = new ArrayList<Item>();
        shop_drink = new ArrayList<Item>();
        shop_dessert = new ArrayList<Item>();

        //Load shops a partir de la base de donnée
        shop_burger = itDAO.selectItemsByType("burger");
        shop_topping = itDAO.selectItemsByType("topping");
        shop_drink = itDAO.selectItemsByType("drink");
        shop_dessert = itDAO.selectItemsByType("dessert");

        //On affiche les shops sur les jList
        shopToDisplay(shop_burger, model1);
        shopToDisplay(shop_topping, model2);
        shopToDisplay(shop_drink, model3);
        shopToDisplay(shop_dessert, model4);
    }

    /**
     * Methode qui recoit la liste et le model correspondante au type Permet
     * d'afficher tous les items dans sa liste correspondante.
     *
     */
    public void refreshShops() {
        //Removing all the element of ours models for jLists
        model1.removeAllElements();
        model2.removeAllElements();
        model3.removeAllElements();
        model4.removeAllElements();
        //Load shops a partir de la base de donnée
        shop_burger = itDAO.selectItemsByType("burger");
        shop_topping = itDAO.selectItemsByType("topping");
        shop_drink = itDAO.selectItemsByType("drink");
        shop_dessert = itDAO.selectItemsByType("dessert");

        //On affiche les shops sur les jList
        shopToDisplay(shop_burger, model1);
        shopToDisplay(shop_topping, model2);
        shopToDisplay(shop_drink, model3);
        shopToDisplay(shop_dessert, model4);
    }

    /**
     * Methode qui recoit la liste et le model correspondante au type, permet
     * d'afficher tous les items dans sa liste correspondante
     *
     * @param shopArray
     * @param listModel
     */
    @SuppressWarnings("unchecked")
    public void shopToDisplay(ArrayList<Item> shopArray, DefaultListModel listModel) {

        //On load toutes les listes pour les afficher dans les jLists et si on peut acheter
        //en bulk on afficher le prix du bulk ainsi que sa quantité
        for (Item shopArray1 : shopArray) {
            //Si pas de discount afficher juste le prix unitaire
            if (shopArray1.getBulkPrice() == 0 || shopArray1.getBulkQuantity() == 0) {
                listModel.addElement(shopArray1.getIdItem() + "   " + shopArray1.getName() + " - " + df.format(shopArray1.getPrice())
                        + " € ");
                //Sinon afficher le lot et pour combien
            } else {
                listModel.addElement(shopArray1.getIdItem() + "   " + shopArray1.getName() + " - " + df.format(shopArray1.getPrice())
                        + " €  " + " (" + df.format(shopArray1.getBulkPrice()) + " € for " + shopArray1.getBulkQuantity() + ")");
            }
        }
    }

    /**
     * This method will load in the 'jTextAreaSales' the list of sales record
     * that are in the database.
     */
    public void loadSalesRecord() {
        //Variables to display the list of items and the sales record
        ArrayList<String> mySalesRecord = new ArrayList<String>();
        //JTEXTAREA'S PROPERTIES :
        //For the sales record :
        jTextAreaSalesRecord.setEditable(false);  //We can't edit the text area  
        jTextAreaSalesRecord.setLineWrap(true);
        jTextAreaSalesRecord.setWrapStyleWord(true);

        //Display the list of sales record that are in the database
        mySalesRecord = salesDAO.getListSalesRecord();
        for (String mySalesRecord1 : mySalesRecord) {
            //Loop that runs throught every sales record
            jTextAreaSalesRecord.append(mySalesRecord1); //We append in the textArea section all the sales record
        }
    }

    /**
     * This method will load in the 'jTextAreaDescription' the description of an
     * item selected and load the item image if the item has one.
     */
    public void loadDescriptionAndImage() {
        //Initialising of the item descrition 
        String descriptionItems = "";
        //Initialising of the item id
        String id_item = "";

        //DESCRIPTION JTEXTAREA PROPERTIES :
        jTextAreaDescription.setEditable(false);  //We can't edit the text area  
        jTextAreaDescription.setLineWrap(true);
        jTextAreaDescription.setWrapStyleWord(true);

        //Refresh description text area 
        jTextAreaDescription.setText("");
        jLabel_image.setIcon(null);
        int iSelected = 0;
        
        //Getting the index of the tabbedpane selected:
        int selIndex = jTabbedPaneItems.getSelectedIndex();
        //When it's the burger pane which is selected :
        if (selIndex == 0) {
            //We are getting the id of the selected item in the burger jList:
            id_item = getIdSelected(jListBurger);
            iSelected = jListBurger.getSelectedIndex();
            jLabel_image.setIcon(shop_burger.get(iSelected).getPicture());
        } //When it's the topping pane which is selected :
        else if (selIndex == 1) {
            //We are getting the id of the selected item in the topping jList:
            id_item = getIdSelected(jListTopping);
            iSelected = jListTopping.getSelectedIndex();
            jLabel_image.setIcon(shop_topping.get(iSelected).getPicture());
        } //When it's the drink pane which is selected :
        else if (selIndex == 2) {
            //We are getting the id of the selected item in the drink jList:
            id_item = getIdSelected(jListDrink);
            iSelected = jListDrink.getSelectedIndex();
            jLabel_image.setIcon(shop_drink.get(iSelected).getPicture());
        } //When it's the dessert pane which is selected :
        else {
            //We are getting the id of the selected item in the dessert jList:
            id_item = getIdSelected(jListDessert);
            iSelected = jListDessert.getSelectedIndex();
            jLabel_image.setIcon(shop_dessert.get(iSelected).getPicture());
        }

        //Getting the description of the item wanted
        //We send the item id as parameter :
        descriptionItems = itDAO.getItemDescription(parseInt(id_item));

        //We append in the textArea section the item description:
        jTextAreaDescription.append(descriptionItems);
        

    }

    /**
     * Action when the edit button is pushed : launching a window jDialog
     * itemDiscount that allow the user to edit pricing detail of an item.
     *
     * @param evt
     */
    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed

        boolean retry = true;
        String id_item = ""; //Initialising the id item
        Item itTemp = new Item();

        //Getting the index of the tabbedpane selected:
        int selIndex = jTabbedPaneItems.getSelectedIndex();

        //When it's the burger pane which is selected :
        if (selIndex == 0 && jListBurger.getSelectedIndex() != -1) {
            //We are getting the id of the selected item in the burger jList:
            id_item = getIdSelected(jListBurger);
            //We create an item object of this id and recovered all the attribut of the item :
            itTemp = itDAO.find(Integer.parseInt(id_item),true);
        } //When it's the topping pane which is selected :
        else if (selIndex == 1 && jListTopping.getSelectedIndex() != -1) {
            //We are getting the id of the selected item in the topping jList:
            id_item = getIdSelected(jListTopping);
            //We create an item object of this id and recovered all the attribut of the item :
            itTemp = itDAO.find(Integer.parseInt(id_item),true);
        } //When it's the drink pane which is selected :
        else if (selIndex == 2 && jListDrink.getSelectedIndex() != -1) {
            //We are getting the id of the selected item in the drink jList:
            id_item = getIdSelected(jListDrink);
            //We create an item object of this id and recovered all the attribut of the item :
            itTemp = itDAO.find(Integer.parseInt(id_item),true);
        } //When it's the dessert pane which is selected :
        else if (selIndex == 3 && jListDessert.getSelectedIndex() != -1) {
            //We are getting the id of the selected item in the dessert jList:
            id_item = getIdSelected(jListDessert);
            //We create an item object of this id and recovered all the attribut of the item :
            itTemp = itDAO.find(Integer.parseInt(id_item),true);
        } //If no item is selected :
        else {
            JOptionPane.showMessageDialog(null, "Please select an item to modify");
        }

        //If the id item does exist
        if (id_item != "") {
            //While their is no action from the jDialog
            //When the confirm button of the jDialog pane is pushed, retry will be false 
            while (retry) {
                try {
                    //Creating the jDialog pane that allow us to edit an item:
                    ItemDiscount_JDialog itdisc = new ItemDiscount_JDialog(this, true, id_item, itTemp.getName(), itTemp.getPicture());
                    itdisc.setVisible(true); //The jDialog window is visible
                    refreshShops(); //Refreshing the display of items
                    //Is the confirm was pushed ? if yes we will get false if no we will get true
                    retry = itdisc.isRetry();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error : call of ItemDiscount_JDialog in Employee_JFrame");
                    retry = false;
                }
            }

        }

    }//GEN-LAST:event_jButtonEditActionPerformed

    /**
     * Action when the button 'Delete' is pushed, the selected item will be
     * deleted from the database.
     *
     * @param evt
     */
    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        String id_item = ""; //Initialising the item id

        //Getting the index of the tabbedpane selected:
        int selIndex = jTabbedPaneItems.getSelectedIndex();

        //When it's the burger pane which is selected :
        if (selIndex == 0 && jListBurger.getSelectedIndex() != -1) {
            //We are getting the id of the selected item in the burger jList:
            id_item = getIdSelected(jListBurger);
        } //When it's the topping pane which is selected :
        else if (selIndex == 1 && jListTopping.getSelectedIndex() != -1) {
            //We are getting the id of the selected item in the topping jList:
            id_item = getIdSelected(jListTopping);
        } //When it's the drink pane which is selected :
        else if (selIndex == 2 && jListDrink.getSelectedIndex() != -1) {
            //We are getting the id of the selected item in the drink jList:
            id_item = getIdSelected(jListDrink);
        } //When it's the dessert pane which is selected :
        else if (selIndex == 3 && jListDessert.getSelectedIndex() != -1) {
            //We are getting the id of the selected item in the dessert jList:
            id_item = getIdSelected(jListDessert);
        } else {
            JOptionPane.showMessageDialog(null, "Please select an item to delete");
        }

        //If the id item does exist
        if (id_item != "") {
            try {
                salesitDAO.deleteItemSalesByItemId(parseInt(id_item));
                itCartDAO.deleteItemCartByItemId(parseInt(id_item));
                jTextAreaDescription.setText("");
                jLabel_image.setIcon(null);
                
                //Call the function that delete an existing item in the database
                itDAO.deleteItem(id_item);
                initJlists();//initialise les models et les lists
                initShops(); //instancie et charge ensuite la liste des items du shop

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error : pushing the button 'delete' in Employee_JFrame.");
            }
        }

    }//GEN-LAST:event_jButtonDeleteActionPerformed

    /**
     * Action when the button 'ADD' is pushed, it will add an item in the
     * database.
     *
     * @param evt
     */
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        try {
            //Creating the jDialog pane that allow us to add an item:
            ItemAdd_JDialog it = new ItemAdd_JDialog(this, true);

            it.setVisible(true); //The windows is now visible
            refreshShops(); //We refresh the display of items

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error : call of ItemAdd_Jframe in Employee_JFrame");
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    /**
     * Action when the button 'Disconnection' is pushed, it will close the
     * current window and open the login window.
     *
     * @param evt
     */
    private void jButtonDisconnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisconnectionActionPerformed
        try {
            //Close the employee interface
            this.dispose();
            //We call the login window
            Login_JFrame log = new Login_JFrame();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error : call of login_Jframe in Employee_JFrame");
        }
    }//GEN-LAST:event_jButtonDisconnectionActionPerformed

    /**
     * When we click on 'jListBurger' we have to load the description of the
     * selected item.
     *
     * @param evt
     */
    private void jListBurgerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListBurgerMouseClicked
        loadDescriptionAndImage();
    }//GEN-LAST:event_jListBurgerMouseClicked

    /**
     * When we click on 'jListTopping' we have to load the description of the
     * selected item.
     *
     * @param evt
     */
    private void jListToppingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListToppingMouseClicked
        loadDescriptionAndImage();
    }//GEN-LAST:event_jListToppingMouseClicked

    /**
     * When we click on 'jListDrink' we have to load the description of the
     * selected item.
     *
     * @param evt
     */
    private void jListDrinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDrinkMouseClicked
        loadDescriptionAndImage();
    }//GEN-LAST:event_jListDrinkMouseClicked

    /**
     * When we click on 'jListDessert' we have to load the description of the
     * selected item.
     *
     * @param evt
     */
    private void jListDessertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDessertMouseClicked
        loadDescriptionAndImage();
    }//GEN-LAST:event_jListDessertMouseClicked

    /**
     * Action when the button 'More Info' is pushed, it will display the receipt
     * of the sales record id that we want to see.
     *
     * @param evt
     */
    private void jButtonMoreInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoreInfoActionPerformed
        try {
            if(jTextFieldSalesId.getText().length() == 0) {
                throw new Exception();
            }
            else {
                try {
                    loadReceipt(parseInt(jTextFieldSalesId.getText()));
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Please enter a compatible salesrecord id");
                }   
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter a salesrecord id");
        }
        
        
    }//GEN-LAST:event_jButtonMoreInfoActionPerformed

    /**
     * Changing the color of the 'add' button when we click on it
     *
     * @param evt
     */
    private void jButtonAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseEntered
        jButtonAdd.setForeground(new Color(255, 230, 153));
    }//GEN-LAST:event_jButtonAddMouseEntered

    /**
     * Changing the color of the 'add' button when we stop clicking on it
     *
     * @param evt
     */
    private void jButtonAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseExited
        jButtonAdd.setForeground(Color.BLACK);
    }//GEN-LAST:event_jButtonAddMouseExited

    /**
     * Changing the color of the 'edit' button when we click on it
     *
     * @param evt
     */
    private void jButtonEditMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEditMouseEntered
        jButtonEdit.setForeground(new Color(255, 230, 153));
    }//GEN-LAST:event_jButtonEditMouseEntered

    /**
     * Changing the color of the 'edit' button when we stop clicking on it
     *
     * @param evt
     */
    private void jButtonEditMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEditMouseExited
        jButtonEdit.setForeground(Color.BLACK);
    }//GEN-LAST:event_jButtonEditMouseExited


    private void jButtonDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeleteMouseClicked
        jButtonDelete.setForeground(new Color(255, 51, 51));
    }//GEN-LAST:event_jButtonDeleteMouseClicked

    /**
     * Changing the color of the 'delete' button when we click on it
     *
     * @param evt
     */
    private void jButtonDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeleteMouseEntered
        jButtonDelete.setForeground(new Color(255, 153, 153));
    }//GEN-LAST:event_jButtonDeleteMouseEntered

    /**
     * Changing the color of the 'delete' button when we stop clicking on it
     *
     * @param evt
     */
    private void jButtonDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeleteMouseExited
        jButtonDelete.setForeground(Color.BLACK);
    }//GEN-LAST:event_jButtonDeleteMouseExited

    /**
     * Changing the color of the 'More Info' button when we click on it
     *
     * @param evt
     */
    private void jButtonMoreInfoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonMoreInfoMouseEntered
        jButtonMoreInfo.setForeground(new Color(255, 230, 153));
    }//GEN-LAST:event_jButtonMoreInfoMouseEntered

    /**
     * Changing the color of the 'More Info' button when we stop clicking on it
     *
     * @param evt
     */
    private void jButtonMoreInfoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonMoreInfoMouseExited
        jButtonMoreInfo.setForeground(Color.BLACK);
    }//GEN-LAST:event_jButtonMoreInfoMouseExited


    private void jButtonMoreInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonMoreInfoMouseClicked
        jButtonMoreInfo.setForeground(new Color(255, 215, 87));
    }//GEN-LAST:event_jButtonMoreInfoMouseClicked

    /**
     * Changing the color of the 'Analytics' button when we click on it
     *
     * @param evt
     */
    private void jButtonAnalyticsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAnalyticsMouseEntered
        jButtonAnalytics.setForeground(new Color(255, 230, 153));
    }//GEN-LAST:event_jButtonAnalyticsMouseEntered

    /**
     * Changing the color of the 'Analytics' button when we stop clicking on it
     *
     * @param evt
     */
    private void jButtonAnalyticsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAnalyticsMouseExited
        jButtonAnalytics.setForeground(Color.BLACK);
    }//GEN-LAST:event_jButtonAnalyticsMouseExited

    /**
     * Changing the color of the 'disconnection' button when we click on it
     *
     * @param evt
     */
    private void jButtonDisconnectionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDisconnectionMouseEntered
        jButtonDisconnection.setForeground(new Color(255, 153, 153));
    }//GEN-LAST:event_jButtonDisconnectionMouseEntered

    /**
     * Changing the color of the 'Disconnection' button when we stop clicking on
     * it
     *
     * @param evt
     */
    private void jButtonDisconnectionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDisconnectionMouseExited
        jButtonDisconnection.setForeground(Color.BLACK);
    }//GEN-LAST:event_jButtonDisconnectionMouseExited

    private void jButtonAnalyticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnalyticsActionPerformed
        
        try {
            Analytics analytics = new Analytics();
            analytics.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error to create analytics frame");
        }
        
    }//GEN-LAST:event_jButtonAnalyticsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Employee_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Employee_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Employee_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Employee_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Employee_JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAnalytics;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDisconnection;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonMoreInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelSalesId;
    private javax.swing.JLabel jLabelSalesRecord;
    private javax.swing.JLabel jLabelTitle1;
    private javax.swing.JLabel jLabelTitle2;
    private javax.swing.JLabel jLabel_image;
    private javax.swing.JList jListBurger;
    private javax.swing.JList jListDessert;
    private javax.swing.JList jListDrink;
    private javax.swing.JList jListTopping;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelItemActions;
    private javax.swing.JPanel jPanelSalesActions;
    private javax.swing.JPanel jPanel_show_item;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPaneItems;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JTextArea jTextAreaSalesRecord;
    private javax.swing.JTextArea jTextAreaTicket;
    private javax.swing.JTextField jTextFieldSalesId;
    // End of variables declaration//GEN-END:variables
}
